// Prisma schema for eSports ESPN platform
// Based on project specification

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id         String   @id @default(uuid())
  name       String
  game       String   // e.g., 'CS2', 'VALORANT', 'LOL'
  startDate  DateTime
  endDate    DateTime
  prizePool  Int?
  location   String?
  status     String   // 'upcoming', 'live', 'completed'
  logoUrl    String?
  streamLinks StreamLink[]
  teams      Team[]   @relation("TournamentTeams")
  matches    Match[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Match {
  id            String   @id @default(uuid())
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  team1         Team      @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id       String
  team2         Team      @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id       String
  scheduledTime DateTime
  status        String   // 'scheduled', 'live', 'completed'
  team1Score    Int?
  team2Score    Int?
  streamLinks   StreamLink[]
  matchType     String   // 'bo1', 'bo3', 'bo5'
  round         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Team {
  id         String   @id @default(uuid())
  name       String
  logoUrl    String?
  country    String
  players    Player[]
  ranking    Int?
  // recentForm can be derived from matches
  tournaments Tournament[] @relation("TournamentTeams")
  matchesAsTeam1 Match[]   @relation("Team1Matches")
  matchesAsTeam2 Match[]   @relation("Team2Matches")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Player {
  id        String   @id @default(uuid())
  nickname  String
  realName  String?
  country   String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  photoUrl  String?
  role      String?
  // stats can be added as a JSON field or separate model in the future
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StreamLink {
  id         String   @id @default(uuid())
  platform   String   // 'twitch', 'youtube', 'other'
  url        String
  language   String
  viewerCount Int?
  isOfficial Boolean
  tournament Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  match      Match?      @relation(fields: [matchId], references: [id])
  matchId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
} 